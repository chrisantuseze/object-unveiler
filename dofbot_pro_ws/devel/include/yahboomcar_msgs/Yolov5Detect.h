// Generated by gencpp from file yahboomcar_msgs/Yolov5Detect.msg
// DO NOT EDIT!


#ifndef YAHBOOMCAR_MSGS_MESSAGE_YOLOV5DETECT_H
#define YAHBOOMCAR_MSGS_MESSAGE_YOLOV5DETECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yahboomcar_msgs
{
template <class ContainerAllocator>
struct Yolov5Detect_
{
  typedef Yolov5Detect_<ContainerAllocator> Type;

  Yolov5Detect_()
    : result()
    , centerx(0.0)
    , centery(0.0)  {
    }
  Yolov5Detect_(const ContainerAllocator& _alloc)
    : result(_alloc)
    , centerx(0.0)
    , centery(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _result_type;
  _result_type result;

   typedef float _centerx_type;
  _centerx_type centerx;

   typedef float _centery_type;
  _centery_type centery;





  typedef boost::shared_ptr< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> const> ConstPtr;

}; // struct Yolov5Detect_

typedef ::yahboomcar_msgs::Yolov5Detect_<std::allocator<void> > Yolov5Detect;

typedef boost::shared_ptr< ::yahboomcar_msgs::Yolov5Detect > Yolov5DetectPtr;
typedef boost::shared_ptr< ::yahboomcar_msgs::Yolov5Detect const> Yolov5DetectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.centerx == rhs.centerx &&
    lhs.centery == rhs.centery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yahboomcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6fde05b13d0b4d8a4f931c44fa3dda6";
  }

  static const char* value(const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6fde05b13d0b4d8ULL;
  static const uint64_t static_value2 = 0xa4f931c44fa3dda6ULL;
};

template<class ContainerAllocator>
struct DataType< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yahboomcar_msgs/Yolov5Detect";
  }

  static const char* value(const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string result\n"
"float32 centerx\n"
"float32 centery\n"
;
  }

  static const char* value(const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.centerx);
      stream.next(m.centery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Yolov5Detect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yahboomcar_msgs::Yolov5Detect_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.result);
    s << indent << "centerx: ";
    Printer<float>::stream(s, indent + "  ", v.centerx);
    s << indent << "centery: ";
    Printer<float>::stream(s, indent + "  ", v.centery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YAHBOOMCAR_MSGS_MESSAGE_YOLOV5DETECT_H
