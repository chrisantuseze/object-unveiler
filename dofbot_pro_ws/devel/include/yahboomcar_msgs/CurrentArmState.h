// Generated by gencpp from file yahboomcar_msgs/CurrentArmState.msg
// DO NOT EDIT!


#ifndef YAHBOOMCAR_MSGS_MESSAGE_CURRENTARMSTATE_H
#define YAHBOOMCAR_MSGS_MESSAGE_CURRENTARMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yahboomcar_msgs
{
template <class ContainerAllocator>
struct CurrentArmState_
{
  typedef CurrentArmState_<ContainerAllocator> Type;

  CurrentArmState_()
    : joint()
    , Pose()
    , arm_error(0)
    , sys_err(0)  {
      joint.assign(0.0);

      Pose.assign(0.0);
  }
  CurrentArmState_(const ContainerAllocator& _alloc)
    : joint()
    , Pose()
    , arm_error(0)
    , sys_err(0)  {
  (void)_alloc;
      joint.assign(0.0);

      Pose.assign(0.0);
  }



   typedef boost::array<float, 6>  _joint_type;
  _joint_type joint;

   typedef boost::array<float, 6>  _Pose_type;
  _Pose_type Pose;

   typedef int32_t _arm_error_type;
  _arm_error_type arm_error;

   typedef int32_t _sys_err_type;
  _sys_err_type sys_err;





  typedef boost::shared_ptr< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentArmState_

typedef ::yahboomcar_msgs::CurrentArmState_<std::allocator<void> > CurrentArmState;

typedef boost::shared_ptr< ::yahboomcar_msgs::CurrentArmState > CurrentArmStatePtr;
typedef boost::shared_ptr< ::yahboomcar_msgs::CurrentArmState const> CurrentArmStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator2> & rhs)
{
  return lhs.joint == rhs.joint &&
    lhs.Pose == rhs.Pose &&
    lhs.arm_error == rhs.arm_error &&
    lhs.sys_err == rhs.sys_err;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yahboomcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5f27c48b1091d6a03004a33ae1aa8e0";
  }

  static const char* value(const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5f27c48b1091d6aULL;
  static const uint64_t static_value2 = 0x03004a33ae1aa8e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yahboomcar_msgs/CurrentArmState";
  }

  static const char* value(const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[6] joint\n"
"float32[6] Pose\n"
"int32 arm_error\n"
"int32 sys_err\n"
;
  }

  static const char* value(const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint);
      stream.next(m.Pose);
      stream.next(m.arm_error);
      stream.next(m.sys_err);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentArmState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yahboomcar_msgs::CurrentArmState_<ContainerAllocator>& v)
  {
    s << indent << "joint[]" << std::endl;
    for (size_t i = 0; i < v.joint.size(); ++i)
    {
      s << indent << "  joint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint[i]);
    }
    s << indent << "Pose[]" << std::endl;
    for (size_t i = 0; i < v.Pose.size(); ++i)
    {
      s << indent << "  Pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Pose[i]);
    }
    s << indent << "arm_error: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arm_error);
    s << indent << "sys_err: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sys_err);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YAHBOOMCAR_MSGS_MESSAGE_CURRENTARMSTATE_H
