// Generated by gencpp from file dofbot_pro_info/cur_jointResponse.msg
// DO NOT EDIT!


#ifndef DOFBOT_PRO_INFO_MESSAGE_CUR_JOINTRESPONSE_H
#define DOFBOT_PRO_INFO_MESSAGE_CUR_JOINTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dofbot_pro_info
{
template <class ContainerAllocator>
struct cur_jointResponse_
{
  typedef cur_jointResponse_<ContainerAllocator> Type;

  cur_jointResponse_()
    : srv_joint1(0.0)
    , srv_joint2(0.0)
    , srv_joint3(0.0)
    , srv_joint4(0.0)
    , srv_joint5(0.0)
    , srv_joint6(0.0)  {
    }
  cur_jointResponse_(const ContainerAllocator& _alloc)
    : srv_joint1(0.0)
    , srv_joint2(0.0)
    , srv_joint3(0.0)
    , srv_joint4(0.0)
    , srv_joint5(0.0)
    , srv_joint6(0.0)  {
  (void)_alloc;
    }



   typedef double _srv_joint1_type;
  _srv_joint1_type srv_joint1;

   typedef double _srv_joint2_type;
  _srv_joint2_type srv_joint2;

   typedef double _srv_joint3_type;
  _srv_joint3_type srv_joint3;

   typedef double _srv_joint4_type;
  _srv_joint4_type srv_joint4;

   typedef double _srv_joint5_type;
  _srv_joint5_type srv_joint5;

   typedef double _srv_joint6_type;
  _srv_joint6_type srv_joint6;





  typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> const> ConstPtr;

}; // struct cur_jointResponse_

typedef ::dofbot_pro_info::cur_jointResponse_<std::allocator<void> > cur_jointResponse;

typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointResponse > cur_jointResponsePtr;
typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointResponse const> cur_jointResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator2> & rhs)
{
  return lhs.srv_joint1 == rhs.srv_joint1 &&
    lhs.srv_joint2 == rhs.srv_joint2 &&
    lhs.srv_joint3 == rhs.srv_joint3 &&
    lhs.srv_joint4 == rhs.srv_joint4 &&
    lhs.srv_joint5 == rhs.srv_joint5 &&
    lhs.srv_joint6 == rhs.srv_joint6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dofbot_pro_info

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a8aa04b9b18701c3796ea044e492219";
  }

  static const char* value(const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a8aa04b9b18701cULL;
  static const uint64_t static_value2 = 0x3796ea044e492219ULL;
};

template<class ContainerAllocator>
struct DataType< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dofbot_pro_info/cur_jointResponse";
  }

  static const char* value(const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# response\n"
"float64 srv_joint1\n"
"float64 srv_joint2\n"
"float64 srv_joint3\n"
"float64 srv_joint4\n"
"float64 srv_joint5\n"
"float64 srv_joint6\n"
"\n"
;
  }

  static const char* value(const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.srv_joint1);
      stream.next(m.srv_joint2);
      stream.next(m.srv_joint3);
      stream.next(m.srv_joint4);
      stream.next(m.srv_joint5);
      stream.next(m.srv_joint6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cur_jointResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dofbot_pro_info::cur_jointResponse_<ContainerAllocator>& v)
  {
    s << indent << "srv_joint1: ";
    Printer<double>::stream(s, indent + "  ", v.srv_joint1);
    s << indent << "srv_joint2: ";
    Printer<double>::stream(s, indent + "  ", v.srv_joint2);
    s << indent << "srv_joint3: ";
    Printer<double>::stream(s, indent + "  ", v.srv_joint3);
    s << indent << "srv_joint4: ";
    Printer<double>::stream(s, indent + "  ", v.srv_joint4);
    s << indent << "srv_joint5: ";
    Printer<double>::stream(s, indent + "  ", v.srv_joint5);
    s << indent << "srv_joint6: ";
    Printer<double>::stream(s, indent + "  ", v.srv_joint6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOFBOT_PRO_INFO_MESSAGE_CUR_JOINTRESPONSE_H
