// Generated by gencpp from file dofbot_pro_info/cur_jointRequest.msg
// DO NOT EDIT!


#ifndef DOFBOT_PRO_INFO_MESSAGE_CUR_JOINTREQUEST_H
#define DOFBOT_PRO_INFO_MESSAGE_CUR_JOINTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dofbot_pro_info
{
template <class ContainerAllocator>
struct cur_jointRequest_
{
  typedef cur_jointRequest_<ContainerAllocator> Type;

  cur_jointRequest_()
    : srv_joints()  {
    }
  cur_jointRequest_(const ContainerAllocator& _alloc)
    : srv_joints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _srv_joints_type;
  _srv_joints_type srv_joints;





  typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cur_jointRequest_

typedef ::dofbot_pro_info::cur_jointRequest_<std::allocator<void> > cur_jointRequest;

typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointRequest > cur_jointRequestPtr;
typedef boost::shared_ptr< ::dofbot_pro_info::cur_jointRequest const> cur_jointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.srv_joints == rhs.srv_joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dofbot_pro_info

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "316e22b41dfc06dd91c3544d4b9ba5ed";
  }

  static const char* value(const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x316e22b41dfc06ddULL;
  static const uint64_t static_value2 = 0x91c3544d4b9ba5edULL;
};

template<class ContainerAllocator>
struct DataType< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dofbot_pro_info/cur_jointRequest";
  }

  static const char* value(const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request\n"
"string  srv_joints\n"
;
  }

  static const char* value(const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.srv_joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cur_jointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dofbot_pro_info::cur_jointRequest_<ContainerAllocator>& v)
  {
    s << indent << "srv_joints: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.srv_joints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOFBOT_PRO_INFO_MESSAGE_CUR_JOINTREQUEST_H
