// Generated by gencpp from file dofbot_pro_info/pos_info.msg
// DO NOT EDIT!


#ifndef DOFBOT_PRO_INFO_MESSAGE_POS_INFO_H
#define DOFBOT_PRO_INFO_MESSAGE_POS_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dofbot_pro_info
{
template <class ContainerAllocator>
struct pos_info_
{
  typedef pos_info_<ContainerAllocator> Type;

  pos_info_()
    : name()
    , pos1(0.0)
    , pos2(0.0)
    , pos3(0.0)
    , Roll(0.0)
    , Pitch(0.0)
    , Yaw(0.0)  {
    }
  pos_info_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , pos1(0.0)
    , pos2(0.0)
    , pos3(0.0)
    , Roll(0.0)
    , Pitch(0.0)
    , Yaw(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef double _pos1_type;
  _pos1_type pos1;

   typedef double _pos2_type;
  _pos2_type pos2;

   typedef double _pos3_type;
  _pos3_type pos3;

   typedef double _Roll_type;
  _Roll_type Roll;

   typedef double _Pitch_type;
  _Pitch_type Pitch;

   typedef double _Yaw_type;
  _Yaw_type Yaw;





  typedef boost::shared_ptr< ::dofbot_pro_info::pos_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dofbot_pro_info::pos_info_<ContainerAllocator> const> ConstPtr;

}; // struct pos_info_

typedef ::dofbot_pro_info::pos_info_<std::allocator<void> > pos_info;

typedef boost::shared_ptr< ::dofbot_pro_info::pos_info > pos_infoPtr;
typedef boost::shared_ptr< ::dofbot_pro_info::pos_info const> pos_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dofbot_pro_info::pos_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dofbot_pro_info::pos_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dofbot_pro_info::pos_info_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::pos_info_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.pos1 == rhs.pos1 &&
    lhs.pos2 == rhs.pos2 &&
    lhs.pos3 == rhs.pos3 &&
    lhs.Roll == rhs.Roll &&
    lhs.Pitch == rhs.Pitch &&
    lhs.Yaw == rhs.Yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dofbot_pro_info::pos_info_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::pos_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dofbot_pro_info

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::pos_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::pos_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::pos_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "464446b8e571013c21f5be23c938371e";
  }

  static const char* value(const ::dofbot_pro_info::pos_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x464446b8e571013cULL;
  static const uint64_t static_value2 = 0x21f5be23c938371eULL;
};

template<class ContainerAllocator>
struct DataType< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dofbot_pro_info/pos_info";
  }

  static const char* value(const ::dofbot_pro_info::pos_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  name\n"
"float64 pos1\n"
"float64 pos2\n"
"float64 pos3\n"
"float64 Roll\n"
"float64 Pitch\n"
"float64 Yaw\n"
;
  }

  static const char* value(const ::dofbot_pro_info::pos_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.pos1);
      stream.next(m.pos2);
      stream.next(m.pos3);
      stream.next(m.Roll);
      stream.next(m.Pitch);
      stream.next(m.Yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pos_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dofbot_pro_info::pos_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dofbot_pro_info::pos_info_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "pos1: ";
    Printer<double>::stream(s, indent + "  ", v.pos1);
    s << indent << "pos2: ";
    Printer<double>::stream(s, indent + "  ", v.pos2);
    s << indent << "pos3: ";
    Printer<double>::stream(s, indent + "  ", v.pos3);
    s << indent << "Roll: ";
    Printer<double>::stream(s, indent + "  ", v.Roll);
    s << indent << "Pitch: ";
    Printer<double>::stream(s, indent + "  ", v.Pitch);
    s << indent << "Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOFBOT_PRO_INFO_MESSAGE_POS_INFO_H
