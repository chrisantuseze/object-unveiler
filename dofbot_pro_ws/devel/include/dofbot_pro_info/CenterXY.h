// Generated by gencpp from file dofbot_pro_info/CenterXY.msg
// DO NOT EDIT!


#ifndef DOFBOT_PRO_INFO_MESSAGE_CENTERXY_H
#define DOFBOT_PRO_INFO_MESSAGE_CENTERXY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dofbot_pro_info
{
template <class ContainerAllocator>
struct CenterXY_
{
  typedef CenterXY_<ContainerAllocator> Type;

  CenterXY_()
    : center_x(0.0)
    , center_y(0.0)  {
    }
  CenterXY_(const ContainerAllocator& _alloc)
    : center_x(0.0)
    , center_y(0.0)  {
  (void)_alloc;
    }



   typedef float _center_x_type;
  _center_x_type center_x;

   typedef float _center_y_type;
  _center_y_type center_y;





  typedef boost::shared_ptr< ::dofbot_pro_info::CenterXY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dofbot_pro_info::CenterXY_<ContainerAllocator> const> ConstPtr;

}; // struct CenterXY_

typedef ::dofbot_pro_info::CenterXY_<std::allocator<void> > CenterXY;

typedef boost::shared_ptr< ::dofbot_pro_info::CenterXY > CenterXYPtr;
typedef boost::shared_ptr< ::dofbot_pro_info::CenterXY const> CenterXYConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dofbot_pro_info::CenterXY_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dofbot_pro_info::CenterXY_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::CenterXY_<ContainerAllocator2> & rhs)
{
  return lhs.center_x == rhs.center_x &&
    lhs.center_y == rhs.center_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dofbot_pro_info::CenterXY_<ContainerAllocator1> & lhs, const ::dofbot_pro_info::CenterXY_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dofbot_pro_info

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dofbot_pro_info::CenterXY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dofbot_pro_info::CenterXY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dofbot_pro_info::CenterXY_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c51e51b1031fa051202f8de7f01927c6";
  }

  static const char* value(const ::dofbot_pro_info::CenterXY_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc51e51b1031fa051ULL;
  static const uint64_t static_value2 = 0x202f8de7f01927c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dofbot_pro_info/CenterXY";
  }

  static const char* value(const ::dofbot_pro_info::CenterXY_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 center_x\n"
"float32 center_y\n"
;
  }

  static const char* value(const ::dofbot_pro_info::CenterXY_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_x);
      stream.next(m.center_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CenterXY_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dofbot_pro_info::CenterXY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dofbot_pro_info::CenterXY_<ContainerAllocator>& v)
  {
    s << indent << "center_x: ";
    Printer<float>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<float>::stream(s, indent + "  ", v.center_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOFBOT_PRO_INFO_MESSAGE_CENTERXY_H
